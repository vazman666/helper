// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/fromsql.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SqlRequestClient is the client API for SqlRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SqlRequestClient interface {
	StreamSql(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Answer, error)
	Change(ctx context.Context, opts ...grpc.CallOption) (SqlRequest_ChangeClient, error)
	Analogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (SqlRequest_AnalogsClient, error)
}

type sqlRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewSqlRequestClient(cc grpc.ClientConnInterface) SqlRequestClient {
	return &sqlRequestClient{cc}
}

func (c *sqlRequestClient) StreamSql(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Answer, error) {
	out := new(Answer)
	err := c.cc.Invoke(ctx, "/fromsql.SqlRequest/StreamSql", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sqlRequestClient) Change(ctx context.Context, opts ...grpc.CallOption) (SqlRequest_ChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SqlRequest_ServiceDesc.Streams[0], "/fromsql.SqlRequest/Change", opts...)
	if err != nil {
		return nil, err
	}
	x := &sqlRequestChangeClient{stream}
	return x, nil
}

type SqlRequest_ChangeClient interface {
	Send(*Answer) error
	CloseAndRecv() (*wrapperspb.BoolValue, error)
	grpc.ClientStream
}

type sqlRequestChangeClient struct {
	grpc.ClientStream
}

func (x *sqlRequestChangeClient) Send(m *Answer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sqlRequestChangeClient) CloseAndRecv() (*wrapperspb.BoolValue, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrapperspb.BoolValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sqlRequestClient) Analogs(ctx context.Context, in *Request, opts ...grpc.CallOption) (SqlRequest_AnalogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SqlRequest_ServiceDesc.Streams[1], "/fromsql.SqlRequest/Analogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &sqlRequestAnalogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SqlRequest_AnalogsClient interface {
	Recv() (*Request, error)
	grpc.ClientStream
}

type sqlRequestAnalogsClient struct {
	grpc.ClientStream
}

func (x *sqlRequestAnalogsClient) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SqlRequestServer is the server API for SqlRequest service.
// All implementations must embed UnimplementedSqlRequestServer
// for forward compatibility
type SqlRequestServer interface {
	StreamSql(context.Context, *Request) (*Answer, error)
	Change(SqlRequest_ChangeServer) error
	Analogs(*Request, SqlRequest_AnalogsServer) error
	mustEmbedUnimplementedSqlRequestServer()
}

// UnimplementedSqlRequestServer must be embedded to have forward compatible implementations.
type UnimplementedSqlRequestServer struct {
}

func (UnimplementedSqlRequestServer) StreamSql(context.Context, *Request) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamSql not implemented")
}
func (UnimplementedSqlRequestServer) Change(SqlRequest_ChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedSqlRequestServer) Analogs(*Request, SqlRequest_AnalogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Analogs not implemented")
}
func (UnimplementedSqlRequestServer) mustEmbedUnimplementedSqlRequestServer() {}

// UnsafeSqlRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SqlRequestServer will
// result in compilation errors.
type UnsafeSqlRequestServer interface {
	mustEmbedUnimplementedSqlRequestServer()
}

func RegisterSqlRequestServer(s grpc.ServiceRegistrar, srv SqlRequestServer) {
	s.RegisterService(&SqlRequest_ServiceDesc, srv)
}

func _SqlRequest_StreamSql_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SqlRequestServer).StreamSql(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fromsql.SqlRequest/StreamSql",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SqlRequestServer).StreamSql(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SqlRequest_Change_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SqlRequestServer).Change(&sqlRequestChangeServer{stream})
}

type SqlRequest_ChangeServer interface {
	SendAndClose(*wrapperspb.BoolValue) error
	Recv() (*Answer, error)
	grpc.ServerStream
}

type sqlRequestChangeServer struct {
	grpc.ServerStream
}

func (x *sqlRequestChangeServer) SendAndClose(m *wrapperspb.BoolValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sqlRequestChangeServer) Recv() (*Answer, error) {
	m := new(Answer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SqlRequest_Analogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SqlRequestServer).Analogs(m, &sqlRequestAnalogsServer{stream})
}

type SqlRequest_AnalogsServer interface {
	Send(*Request) error
	grpc.ServerStream
}

type sqlRequestAnalogsServer struct {
	grpc.ServerStream
}

func (x *sqlRequestAnalogsServer) Send(m *Request) error {
	return x.ServerStream.SendMsg(m)
}

// SqlRequest_ServiceDesc is the grpc.ServiceDesc for SqlRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SqlRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fromsql.SqlRequest",
	HandlerType: (*SqlRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamSql",
			Handler:    _SqlRequest_StreamSql_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Change",
			Handler:       _SqlRequest_Change_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Analogs",
			Handler:       _SqlRequest_Analogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/fromsql.proto",
}
